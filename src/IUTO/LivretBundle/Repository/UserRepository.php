<?php

namespace IUTO\LivretBundle\Repository;

use Symfony\Bridge\Doctrine\Security\User\UserLoaderInterface;
use Symfony\Component\Security\Core\User\UserInterface;
use Symfony\Component\Security\Core\User\UserProviderInterface;
use Symfony\Component\Security\Core\Exception\UsernameNotFoundException;
use Symfony\Component\Security\Core\Exception\UnsupportedUserException;
use Doctrine\ORM\EntityRepository;
use IUTO\LivretBundle\Entity\Departement;
use IUTO\LivretBundle\Entity\Formation;
use IUTO\LivretBundle\Entity\User;
use phpCAS;
use Symfony\Bundle\FrameworkBundle\Controller\Controller;
use Symfony\Component\HttpFoundation\Request;
use Symfony\Component\Ldap\Adapter\ExtLdap\Adapter;
use Symfony\Component\Ldap\Ldap;
use Symfony\Component\Security\Core\Authentication\Token\UsernamePasswordToken;
use Symfony\Component\Security\Http\Event\InteractiveLoginEvent;

/**
 * UserRepository
 *
 * This class was generated by the Doctrine ORM. Add your own custom
 * repository methods below.
 */
class UserRepository extends \Doctrine\ORM\EntityRepository implements UserLoaderInterface
{
    public function refreshUser(UserInterface $user)
    {
        if (!$user instanceof User) {
            throw new UnsupportedUserException(
                sprintf('Instances of "%s" are not supported.', get_class($user))
            );
        }

        return $this->loadUserByUsername($user->getUsername());
    }

    public function loadUserByUsername($username)
    {
//        Parametres de configuration pour la recherche ldap
        $config = array(
            'host' => 'ldap-univ.iut45.univ-orleans.fr',
            'port' => 636,
            'version' => 3,
            'encryption' => 'ssl'
        );
        $AdapterInterface = new Adapter($config);
        $ldap = new Ldap($AdapterInterface);
        $ldap->bind();
//        Récupération des infos de la personne qui se connecte via ldap avec son numero universitaire
        $infosPersonne = $ldap->query("ou=People,dc=univ-orleans,dc=fr", "uid=" . $username)->execute()->toArray()[0];

//        Récupération de l'entity Manager
        $em = $this->getEntityManager();
//        Récupération de l'uitilisateur dans la base de données ( null si non existant )
        $user = $this->findOneByIdUniv($username);

//        Correspondance entre les formations et l'intitulé des formations dans ldap
        $corresLDAP = array(
            'IO1320' => array('1A', 'Chimie'),
            'IO1321' => array('2A', 'Chimie'),
            'IO1330' => array('1A', 'GMP'),
            'IO1331' => array('2A', 'GMP'),
            'IO1340' => array('1A', 'Informatique'),
            'IO1341' => array('2A', 'Informatique'),
            'IO1342' => array('AS', 'Informatique'),
            'IO1350' => array('1A', 'QLIO'),
            'IO1351' => array('2A', 'QLIO'),
            'IO1360' => array('1A', 'GEA'),
            'IO1361' => array('2AGCF', 'GEA'),
            'IO1364' => array('AS', 'GEA'),
            'IO1362' => array('2AGMO', 'GEA'),
            'IO1D62' => array('2AGMOD', 'GEA'),
            'IO1363' => array('2AGRH', 'GEA'),
            'IO1370' => array('1A', 'GTE'),
            'IO1371' => array('2A', 'GTE'),
            'ILPO28' => array('LPRT', 'Informatique'),
            'ILPO25' => array('LPPCPC', 'Chimie'),
            'ILPO24' => array('LPCF', 'Chimie'),
            'ILPO23' => array('LPCAC', 'Chimie'),
            'ILPO26' => array('LPCSACE', 'GMP'),
            'ILPO27' => array('LPCPA', 'GMP'),
            'ILPO22' => array('LPGPI', 'QLIO'),
            'ILPO20' => array('LPGRH', 'GEA'),
            'ILPO29' => array('LPMCF', 'GEA'),
            'ILPO21' => array('LPEBSI', 'GTE'),
        );
//        On vérifie que l'utilisateur à été trouver dans la base ldap
        if ($infosPersonne){
//            On regarde si l'utilisateur est déjà existant
            if (!$user) {
//                Création d'un nouvel utilisateur si il n'est pas déjà existant
                $user = new User();

//                Affectation des valeurs récupérée dans ldap à l'utilisateur
                $user->setPrenomUser($infosPersonne->getAttribute("givenName")[0]);
                $user->setNomUser($infosPersonne->getAttribute("sn")[0]);
                $user->setMailUser($infosPersonne->getAttribute("mail")[0]);
                $user->addRole("ROLE_" . $infosPersonne->getAttribute("eduPersonPrimaryAffiliation")[0]);
                $user->setIdUniv($infosPersonne->getAttribute("uid")[0]);

//                On regarde si l'utilisateur est un étudiant
//                Si c'est le cas, on va lui ajouter une formation
                if ($user->getRole() == "ROLE_student")
                {
                    $codeFormation = $infosPersonne->getAttribute("unrcEtape")[0];

                    $infForm = $corresLDAP[$codeFormation];
//                    Récupération de la formation dans la base de données
                    $formation = $em->getRepository(Formation::class)->findOneBy(array("departement" => ($em->getRepository(Departement::class)->findOneByNomDpt($infForm[0])), "typeFormation" => $infForm[0]));
                    if (!$formation)
                    {
//                        On crée la formation si elle n'as pas déjà été ajoutée a la base
                        $newF = new Formation();
                        $newF->setTypeFormation($infForm[0]);
                        $newF->setDepartement($em->getRepository("IUTOLivretBundle:Departement")->findOneByNomDpt($corresLDAP[$codeFormation][1]));
                        $dDeb = new \DateTime();
                        $dFin = new \DateTime();
                        if (date("m") < 9)
                        {
                            $dDeb->setDate(date("y"), 1, 15);
                            $dFin->setDate(date("y"), 8, 15);
                            $newF->setSemestre(2);

                        }
                        else
                        {
                            $dDeb->setDate(date("y") - 1, 8, 16);
                            $dFin->setDate(date("y"), 1, 14);
                            $newF->setSemestre(1);
                        }
                        $newF->setDateDebut($dDeb);
                        $newF->setDateFin($dFin);
                        $formation = $newF;
                        $em->persist($formation);
                    }
//                    Ajout de la formation à l'utilisateur
                    $user->addFormation($formation);
//                    Ajout de l'utilisateur à la formation
                    $formation->addUser($user);
                }

            } else {
//                Actualisation des informations sur l'utilisateur
//                Affectation des valeurs récupérée dans ldap à l'utilisateur
                $user->setPrenomUser($infosPersonne->getAttribute("givenName")[0]);
                $user->setNomUser($infosPersonne->getAttribute("sn")[0]);
                $user->setMailUser($infosPersonne->getAttribute("mail")[0]);
                $user->setRoles($user->getRoles());
                if ( !$user->getRoles()->contains("ROLE_" . $infosPersonne->getAttribute("eduPersonPrimaryAffiliation")[0]))
                {
                    $user->addRole("ROLE_" . $infosPersonne->getAttribute("eduPersonPrimaryAffiliation")[0]);
                }
                $user->setIdUniv($infosPersonne->getAttribute("uid")[0]);

            }
//            Enregistrement de l'utilisateur dans la base
            $em->persist($user);
            $em->flush();

            return $user;
        } else {
//            Exeption si l'utilisateur n'existe pas dans la base ldap
            throw new UsernameNotFoundException('Username "'.$username.'" does not exist.');
        }
    }

    public function supportsClass($class)
    {
        return User::class === $class;
    }

}
